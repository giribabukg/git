<?php
/**
 * Inc - Jobs: Projects - Crp
 *
 *  SINGLETON
 *  Delivers Infos about the Project Critical Path Functionality: like
 *  ProStatus($aProId)
 *  ProjectsAmount($aProId)
 *  SubAmount($aProId)
 *  StatusClosedMax($aProId)
 *  StatusClosed($aProId)
 *  ViewJoblist()
 *
 * @package    JOB
 * @subpackage    Projects
 * @copyright  Copyright (c) 2004-2010 QBF GmbH (http://www.qbf.de)
 * @version $Rev$
 * @date $Date$
 * @author $Author$
 */
class CInc_Job_Pro_Crp extends CCor_Obj {

  /**
   * Singleton instance
   *
   * @var CCor_Sql $mInstance
   */
  private static $mInstance;

  private $mAutoProStatus = array();
  private $mProStatus = array();
  private $mProStatusAll = array();
  private $mProjectsAmount = array();
  private $mSubAmount = array();
  private $mSubLeerAmount = array();
  private $mStatusClosed = array();
  private $mStatusClosedMax = array();
  private $mJobSrcOrderArr = array();
  private $mNoStatusFromStep = array();
  private $mNoStatusToStep = array();
  private $m1StatusNoStep;
  private $m1StatusNoFromStep;
  private $mViewJoblist = TRUE;

  private function __construct($aProIdlist = array()) {
    if (!empty($aProIdlist)) {
      $this -> mProIdList = $aProIdlist; // array(30,31,32,33);
      $lProIdlist = array_map("esc", $aProIdlist);
      $lProIdListAsStr = implode(',', $lProIdlist);
      $lProStatus = array();
      $lSubStatus = array();
      $lStatusSrcSetEmpty = array();
      $lProjectsAmount = array();

      foreach ($this -> mProIdList as $lProId) {
        $this -> mAutoProStatus[$lProId] = 1;
        $this -> mProStatus[$lProId] = array();
        $this -> mProStatusAll[$lProId] = array();
        $this -> mProjectsAmount[$lProId] = 0;
        $this -> mSubAmount[$lProId] = 0;
        $this -> mSubLeerAmount[$lProId] = 0;
        $this -> mStatusClosed[$lProId] = array();
        $this -> mStatusClosedMax[$lProId] = -1;//0 geht nicht, da sonst keine Unterscheidung zwischen default und gesetzter 0
        $this -> mNoStatusFromStep = array();
        $this -> mNoStatusToStep = array();
        $this -> m1StatusNoStep = 0;
        $this -> m1StatusNoFromStep = 0;

        $lStatusClosed[$lProId] = array(); // alle vorherigen Status müssen ebenfalls geschlossen sein.
        $lStatusClosedMax[$lProId] = array();
        $lProStatus[$lProId] = array();
        $lSubStatus[$lProId] = array();
        $lStatusSrcSetEmpty[$lProId] = array();
        $lProjectsAmount[$lProId] = 0;
      }

      $this -> mJobSrcOrderArr = CCor_Cfg::get('job.items.order', array());
      $this -> mViewJoblist = CCor_Cfg::get('view.projekt.joblist', TRUE);

      if (!$this -> mViewJoblist) {
        $lPro2Src = array();
        $lJobSrcOrderArr = array();
        $lProCrpDisplay = array();

        $lArr = CCor_Res::extract('code', 'id', 'crpmaster');
        $lCrpId = $lArr['pro'];
        $lCrp = CCor_Res::get('crp', $lCrpId);
        $lCrpStatus = array_keys($lCrp); // CCor_Res::extract('display', 'id', 'crp', $lCrpId);
        $lCrpSteps = array(); // CCor_Res::extract('to_id', 'to_id', 'crpstep', $lCrpId);//geht so nicht, da ein Status auf sich selbst steppen koennte
        $lCrpFromSteps = array();
        $lSteps = CCor_Res::get('crpstep', $lCrpId);
        foreach ($lSteps as $lStp) {
          if ($lStp['from_id'] != $lStp['to_id']) {
            $lCrpSteps[] = $lStp['to_id'];
          }
          if ($lStp['from_id'] != $lStp['to_id']) {
            $lCrpFromSteps[] = $lStp['from_id'];
          }
        }
        $lNoStatusToStep = array_diff($lCrpStatus,$lCrpSteps);
        $lNoStatusToStep = array_flip($lNoStatusToStep);
        $lNoStatusFromStep = array_diff($lCrpStatus,$lCrpFromSteps);
        $lNoStatusFromStep = array_flip($lNoStatusFromStep);

        foreach ($lCrp as $lStaId => $lSta) {
          $lDis = $lSta['display'];
          $this -> mProCrp[$lDis] = $lSta;
          //NoStatus"ToStep" == No "Step->"Status
          if (isset($lNoStatusToStep[$lStaId]) AND 1 < $lDis) {
            $this -> mNoStatusToStep[$lDis] = TRUE;
          } else {
            $this -> mNoStatusToStep[$lDis] = FALSE;
          }
          //NoStatus"FromStep" == No Status"->Step"
          if (isset($lNoStatusFromStep[$lStaId]) AND 1 < $lDis) {
            $this -> mNoStatusFromStep[$lDis] = TRUE;
          } else {
            $this -> mNoStatusFromStep[$lDis] = FALSE;
          }

          if (!isset($lProCrpDisplay['min'])) {
            $lProCrpDisplay['min'] = $lDis;
          } elseif ($lProCrpDisplay['min'] > $lDis) {
            $lProCrpDisplay['min'] = $lDis;
          }
          if (!isset($lProCrpDisplay['max'])) {
            $lProCrpDisplay['max'] = $lDis;
          } elseif ($lProCrpDisplay['max'] < $lDis) {
            $lProCrpDisplay['max'] = $lDis;
          }
        }
        ksort($this -> mNoStatusToStep);
        foreach ($this -> mNoStatusToStep as $lK => $lBool) {
          if (TRUE == $lBool) {
            $this -> m1StatusNoStep = $lK;
            BREAK;
          }
        }
        foreach ($this -> mNoStatusFromStep as $lK => $lBool) {
          if (TRUE == $lBool) {
            $this -> m1StatusNoFromStep = $lK;
            BREAK;
          }
        }

        $lWithNoProjection = TRUE;
        $lSrcStaPro = CCrp_Cnt::getJob2ProjectAssignment();#($lWithNoProjection);

        $lSrcStaProMinMax = array();
        $lSrcDisplayMinMax = array();
        $lSrcStaProNoProjection = array();
        $lOrderProStatusBySrc1 = array();
        $lOrderProStatusBySrc = array();
        $lOrderProStatusByAllSrc = array();
        //Annahme: Die Reihenfolge von 'display' entspricht der aufsteigenden Reihenfolge d. CRP (z.B. 1, 2, 3, ..., 10)
        //in Projekten gibt es KEINE Loops à la APL, obwohl er mehrfach durchlaufen werden kann!
        if (!empty($lSrcStaPro)) {
          foreach ($lSrcStaPro as $lSrc => $lStatus) {
            $lLastDis = 0;
            foreach ($lStatus as $lWebstatus => $lInfo) {
              if (!isset($lSrcDisplayMinMax[$lSrc])) {
                $lSrcDisplayMinMax[$lSrc]['min'] = $lInfo['display'];
                $lSrcDisplayMinMax[$lSrc]['max'] = $lInfo['display'];
              }
              if ($lSrcDisplayMinMax[$lSrc]['min'] > $lInfo['display']) {
                $lSrcDisplayMinMax[$lSrc]['min'] = $lInfo['display'];
              }
              if ($lSrcDisplayMinMax[$lSrc]['max'] < $lInfo['display']) {
                $lSrcDisplayMinMax[$lSrc]['max'] = $lInfo['display'];
              }
              $lInfo['pro_con'] = intval($lInfo['pro_con']);
              if (0 < $lInfo['pro_con']) {
                if (!isset($lSrcStaProMinMax[$lSrc]['min'])) {
                  $lSrcStaProMinMax[$lSrc]['min'] = $lInfo['pro_con'];
                }
                if (!isset($lSrcStaProMinMax['pro']['min'])) {
                  $lSrcStaProMinMax['pro']['min'] = $lInfo['pro_con'];
                  $lSrcStaProMinMax['pro']['max'] = $lInfo['pro_con'];
                }
                if ($lSrcStaProMinMax[$lSrc]['min'] < $lSrcStaProMinMax['pro']['min']) {
                  $lSrcStaProMinMax['pro']['min'] = $lSrcStaProMinMax[$lSrc]['min'];
                }
                if (!isset($lOrderProStatusBySrc1[$lSrc][$lLastDis]) OR $lOrderProStatusBySrc1[$lSrc][$lLastDis] != $lInfo['pro_con']) {
                  $lOrderProStatusBySrc1[$lSrc][$lInfo['display']] = $lInfo['pro_con'];  // array(['display'], ['pro_con'])
                  $lOrderProStatusByAllSrc[$lSrc][$lInfo['display']] = $lInfo['pro_con'];
                  $lLastDis = $lInfo['display'];
                }
                $lSrcStaProMinMax[$lSrc]['max'] = $lInfo['pro_con'];
                if ($lSrcStaProMinMax['pro']['max'] < $lSrcStaProMinMax[$lSrc]['max']) {
                  $lSrcStaProMinMax['pro']['max'] = $lSrcStaProMinMax[$lSrc]['max'];
                }
                //end_if (0 < $lInfo['pro_con'])
              } elseif ('pro' != $lSrc) {
                $lSrcStaProNoProjection[$lSrc][$lInfo['display']] = $lInfo['pro_con'];
                $lOrderProStatusByAllSrc[$lSrc][$lInfo['display']] = $lInfo['pro_con'];
              }
            }//end_foreach ($lStatus as $lInfo)
          }//end_foreach ($lSrcStaPro as $lSrc => $lStatus)

          //Annahme: die Job-Projektionen auf Pro-status sind LINEAR - KEINE Loops, aufsteigende Reihenfolge!
          // und sie sind je Jobtyp disjunkt.
          $lOrderProStatusBySrc['pro'] = array();
          foreach ($lOrderProStatusBySrc1 as $lSrc => $lStatus) {
            // Aufbau des Arrays durch Anhaengen der Arrays der bisherigen Jobtypen (kein Mergen)
            $lOrderProStatusBySrc['pro'] = $lOrderProStatusBySrc['pro'] + $lOrderProStatusBySrc1[$lSrc];
            $lOrderProStatusBySrc[$lSrc] = array_flip($lStatus);
          }
          asort($lOrderProStatusBySrc['pro']);
          $lOrderProStatusBySrc['pro'] = array_flip($lOrderProStatusBySrc['pro']);

          #  Baue was, damit ich weiß ob art < rep! Bzgl. StatusClosed hat 1 die höchste prio, absteigend bis zur 9 mit der niedrigsten Prio
          foreach ($lOrderProStatusBySrc1 as $lSrc => $lProjection) {
            foreach ($lProjection as $lPro_sta) {
              if (!isset($lPro2Src[$lPro_sta])) {
                $lPro2Src[$lPro_sta] = array();
                $lPro2Src[$lPro_sta][0] = 1;  //'count'
              } else {
                $lPro2Src[$lPro_sta][0] += 1;  //'count'
              }
                $lPro2Src[$lPro_sta][] = $lSrc;
              }
            }
          foreach ($this -> mProCrp as $lDis => $lSta) {
            //liefert alle Projekt Status
            if (!isset($lPro2Src[$lDis])) {
              $lPro2Src[$lDis] = array();
              $lPro2Src[$lDis][0] = 0;  //'count'
            }
          }
          ksort($lPro2Src);

          foreach ($lPro2Src as $lPro_sta => $lScrInfo) {
            if (0 < $lScrInfo[0] AND !in_array($lScrInfo[1], $lJobSrcOrderArr)) { //'count' AND 'scr'
              $lJobSrcOrderArr[] = $lScrInfo[1];
            }
          }
          $lJobSrcOrder = array_flip($lJobSrcOrderArr);

          $lAforeArr = array();
          $lPossibleStatus = array();
          $lPossibleStatusOrder = array();
          foreach ($lJobSrcOrderArr as $lSrc) {
            $lAforeArr[$lSrc] = FALSE;
            $lPossibleStatus[$lSrc.'_before'] = 0; // vor Src_Status(Pro) == Max_Status(Pro) v. vorherigen Src
            $lPossibleStatusOrder[] = $lSrc.'_before';
            $lPossibleStatus[$lSrc.'_prost'] = 0; // im Status == Src_Status(Pro)
            $lPossibleStatusOrder[] = $lSrc.'_prost';
            $lPossibleStatus[$lSrc.'_after'] = 0; // nach Src_Status(Pro) == Max_Status(Pro) v. Src
            $lPossibleStatusOrder[] = $lSrc.'_after';
          }

          // -------------------------------------------------------------------------------------
          // ------------------------ Jetzt werden alle Jobs durchlaufen! ------------------------
          // -------------------------------------------------------------------------------------
          $lSql = 'SELECT * FROM al_job_pro_crp WHERE mand='.MID.' AND pro_id IN ('.$lProIdListAsStr.')';
          $lSql.= ' ORDER BY `pro_id` ASC, `pro_status` ASC;';
          $lQry = new CCor_Qry();
          $lQry -> query($lSql);

          $lQry_Al_Job_Pro_Crp = $lQry;

          ###################

          $lSrcArr = array();
          foreach ($lJobSrcOrderArr as $lSrc) {
            $lSrcArr[$lSrc] = array('job_status' => 0, 'pro_status' => 0);
          }

          $lAmountJobsInProStatus = array();
          foreach ($lQry_Al_Job_Pro_Crp as $lRow) {
            $lPro = $lRow['pro_id'];
            $lSub = $lRow['sub_id'];
            $lSrc = $lRow['src'];
            if (!isset($lJobSrcOrder[$lSrc])) continue; // wenn eine Src nicht abgebildet wird, fliesst sie auch nicht in die Berechnung ein.

            if (!isset($lAmountJobsInProStatus[$lPro])) {
              $lAmountJobsInProStatus[$lPro] = array();
            }

            if (0 < $lRow['pro_status']) {
              if (!isset($lAmountJobsInProStatus[$lPro][$lRow['pro_status']])) {
                $lAmountJobsInProStatus[$lPro][$lRow['pro_status']] = 0;
              }
              $lAmountJobsInProStatus[$lPro][$lRow['pro_status']] += 1;
            }
          }

          $this -> mAmountJobsInProStatus = $lAmountJobsInProStatus;

          ###################

          foreach ($lQry_Al_Job_Pro_Crp as $lRow) {
            $lPro = $lRow['pro_id'];
            $lSub = $lRow['sub_id'];
            $lSrc = $lRow['src'];

            if (!isset($lJobSrcOrder[$lSrc])) continue; // wenn eine Src nicht abgebildet wird, fliesst sie auch nicht in die Berechnung ein.

            if (!isset($lSubStatus[$lPro]["$lSub"])) {
              $lSubStatus[$lPro]["$lSub"] = $lPossibleStatus; // prefilled
            }
            $lSubStatus[$lPro]["$lSub"][$lSrc.'_prost'] = intval($lRow['pro_status']);

            if ($lSrcDisplayMinMax[$lSrc]['min'] > $lRow['job_status']) {
              $lSourceOrder = $lJobSrcOrder[$lSrc];
              if (0 === $lSourceOrder) {
                $lSubStatus[$lPro]["$lSub"][$lSrc.'_before'] = 1;
              } else {
                $lSrcAfore = $lJobSrcOrderArr[$lSourceOrder-1];
                $lSubStatus[$lPro]["$lSub"][$lSrc.'_before'] = $lSrcStaProMinMax[$lSrcAfore]['max'];
              }
            }

            if ($lSrcDisplayMinMax[$lSrc]['max'] < $lRow['job_status']) {
              $lSubStatus[$lPro]["$lSub"][$lSrc.'_after'] = $lSrcStaProMinMax[$lSrc]['max'];
            }

            $lSubStatusAmount[$lPro] = count($lSubStatus[$lPro]);

            if (!isset($lProjectsAmount[$lPro])) {
              $lProjectsAmount[$lPro] = 0;
            }

            foreach ($this -> mProCrp as $lDis => $lSta) {
              $lLastTimeIn = 'lti_'.$lDis;
              $lFirstTimeIn = 'fti_'.$lDis;

              if (!isset($lProStatus[$lPro][$lDis])) {
                $lProStatus[$lPro][$lDis] = array();
                $lProStatus[$lPro][$lDis]['display'] = $lDis;
                if ($lSrcStaProMinMax['pro']['min'] <= $lDis AND $lDis <= $lSrcStaProMinMax['pro']['max']) {
                  $lProStatus[$lPro][$lDis]['used'] = TRUE; // fuer diesen Status gibt es eine Projektion
                } else {
                  $lProStatus[$lPro][$lDis]['used'] = FALSE;
                }
                $lProStatus[$lPro][$lDis]['pro_status'] = FALSE;
                $lProStatus[$lPro][$lDis]['count'] = 0;
                $lProStatus[$lPro][$lDis]['date']  = '000-00-00 00:00:00';
                $lProStatus[$lPro][$lDis]['pass']  = FALSE;
                $lProStatus[$lPro][$lDis]['afore'] = FALSE;
                $lProStatus[$lPro][$lDis]['after'] = FALSE;
              }
              $lPass = FALSE;
              if ($lDis == $lRow['pro_status']) {
                $lProStatus[$lPro][$lDis]['pro_status'] = TRUE; // ein Job "ist gerade in" pro_status
                $lProStatus[$lPro][$lDis]['count'] += 1;
                $lProjectsAmount[$lPro] += 1;
                $lPass = TRUE;
              }

              if ($lProStatus[$lPro][$lDis]['date'] < $lRow[$lLastTimeIn]) {
                $lProStatus[$lPro][$lDis]['date'] = $lRow[$lLastTimeIn];
              }
              if ('000-00-00 00:00:00' < $lRow[$lFirstTimeIn] OR '000-00-00 00:00:00' < $lRow[$lLastTimeIn] OR $lPass) {
                $lProStatus[$lPro][$lDis]['pass'] = TRUE;
              }

              if ('pro' != $lSrc AND 0 == $lRow['pro_status'] AND 0 < $lRow['job_status']) {
                if ($lSrcDisplayMinMax[$lSrc]['min'] > $lRow['job_status'] AND 1 == ($lSrcStaProMinMax[$lSrc]['min'] - $lDis)) {
                  $lProStatus[$lPro][$lDis]['afore'] = TRUE;
                }
                if ($lSrcDisplayMinMax[$lSrc]['max'] < $lRow['job_status'] AND 1 == ($lDis - $lSrcStaProMinMax[$lSrc]['max'])) {
                  $lProStatus[$lPro][$lDis]['after'] = TRUE;
                }
              }
            }

          }//end_foreach ($lQry_Al_Job_Pro_Crp as $lRow)
          // ------------------------STOP: Jetzt werden alle Jobs durchlaufen! ------------------------

          // -------------------------------------------------------------------------------------
          // ------------------------ Jetzt werden alle ProItems durchlaufen! ------------------------
          // -------------------------------------------------------------------------------------
          foreach ($lSubStatus as $lProId => $lItemList) {

            $lAutomSubStatus[$lProId] = array();
            if (!empty($lItemList)) {
              // Vorbelegung von AutomProjectStatus mit MaxStatus, da der kleinste Status gesucht wird
              $lAutomProjectStatus[$lProId] = $lSrcStaProMinMax['pro']['max'];
            } else {
              $lAutomProjectStatus[$lProId] = 1; //ist der kleinste Projektstatus
            }

            foreach ($lItemList as $lSubId => $lItem) {
              foreach ($lItem as $lOrder => $lSta) { // entspricht der Reihenfolge von $lPossibleStatusOrder
                if (0 < $lSta) {
                  $lAutomSubStatus[$lProId][$lSubId] = $lSta;
                  if ($lSta < $lAutomProjectStatus[$lProId]) {
                    $lAutomProjectStatus[$lProId] = $lSta;
                  }
                  break;
                }
              }
            }
          }
          // ------------------------STOP: Jetzt werden alle ProItems durchlaufen! ------------------------


          $this -> mProStatus = $lProStatus;
          $this -> mProStatusAll = $lProStatus;
          $this -> mProjectsAmount = $lProjectsAmount;
          // wiviele JobItems gibt es pro Projekt?
          $lSql = 'SELECT pro_id, COUNT(*) AS SubAmount FROM al_job_sub_'.MID.' WHERE pro_id IN ('.$lProIdListAsStr.')'; //alle ProIds
          $lSql.= ' GROUP BY pro_id';
          $lQry -> query($lSql);
          foreach ($lQry as $lRow) {
            $lPro = $lRow['pro_id'];
            $this -> mSubAmount[$lPro] = intval($lRow['SubAmount']);

            $this -> mSubLeerAmount[$lPro] = $this -> mSubAmount[$lPro];
            if (isset($lSubStatusAmount[$lPro])) {
              $this -> mSubLeerAmount[$lPro] -= $lSubStatusAmount[$lPro];//AllSubs - AllSubsWithJobs
          }
          }

          $lAutoProStatus = array();
          foreach ($lSubStatus as $lPro => $lSub) {
            if (0 == $this -> mSubLeerAmount[$lPro]) {
              foreach ($lSub as $lid => $lStaInfo) {
                $lAutoSubStatus = 0;
                foreach ($lPossibleStatusOrder as $lOrder) {
                  if (0 < $lStaInfo[$lOrder]) {
                    if ($lAutoSubStatus < $lStaInfo[$lOrder]) {
                      $lAutoSubStatus = $lStaInfo[$lOrder];
//                       if (FALSE !== stripos($lOrder, '_before') OR FALSE !== stripos($lOrder, '_prost')) {
                      if (FALSE !== stripos($lOrder, '_before') OR FALSE !== stripos($lOrder, '_after')) {
                        break;
                      }
                    }
                  }
                }

                if (!isset($lAutoProStatus[$lPro])) {
                  $lAutoProStatus[$lPro] = $lAutoSubStatus;
                }

                if ($lAutoSubStatus < $lAutoProStatus[$lPro]) {
                  $lAutoProStatus[$lPro] = $lAutoSubStatus;
                }
              }
            }

            if (!isset($lAutoProStatus[$lPro])) {
              $lAutoProStatus[$lPro] = 1;
            }
          }
          $this -> mAutoProStatus = $lAutoProStatus;

          $lOrderProStatusBySrc_NoPro = $lOrderProStatusBySrc;
          unset($lOrderProStatusBySrc_NoPro['pro']);

          $lProIdListAsStr = '';
          if (!empty($lProStatus)) {
            $lJoblist = array();
            foreach ($lProStatus as $lPro => $lStaInfo) {
              if (!empty($lProStatus[$lPro])) { //wird nur einmal pro ProjektId durchlaufen!
                $lStatusClosed[$lPro]['pro'] = array();

                foreach ($lOrderProStatusBySrc_NoPro as $lSrc => $lStatus) {
                  $lLastDis = 0;
                  $lStatusClosedMax[$lPro][$lSrc] = -1;
                  $lStatusClosed[$lPro][$lSrc][0] = TRUE;

                  foreach ($lStatus as $lPro_status => $lSrc_status) {
                    $lInfo = $lStaInfo[$lPro_status];

                    if ($lStatusClosed[$lPro][$lSrc][$lLastDis] AND !$lInfo['pro_status']
                        AND 0 == $lInfo['count'] AND '000-00-00 00:00:00' < $lInfo['date'] AND $lInfo['pass']) {
                      $lJoblist[$lPro] = esc($lPro);
                      $lStatusClosed[$lPro][$lSrc][$lPro_status] = true;
                      #$lStatusClosed[$lPro]['pro'][$lPro_status] = $lPro_status;
                      $lLastDis = $lPro_status;
                      if ($lStatusClosedMax[$lPro][$lSrc] < $lPro_status) {
                        $lStatusClosedMax[$lPro][$lSrc] = $lPro_status;
                      }
                    }
                  }
                  unset($lStatusClosed[$lPro][$lSrc][0]);
                }//end_foreach ($lOrderProStatusBySrc_NoPro as $lSrc => $lStatus)

                /*
                 *  In $lStatusClosedMax[$lPro]['pro'] und $lStatusClosed[$lPro]['pro'] befinden sich nur Informationen ueber
                 *  Jobs, die es bereits gibt, die sich aber noch vor oder bereits nach der Projektion befinden.
                 */
                $lStatusClosed[$lPro]['pro'][0] = 0;
                foreach ($lStaInfo as $lPro_status => $lPro_StatusInfo) {
                  if ($lPro_StatusInfo['afore'] == TRUE) {
                    $lJoblist[$lPro] = esc($lPro);
                    $lStatusClosed[$lPro]['pro'][$lPro_status] = $lPro_status;
                    if (!isset($lStatusClosedMax[$lPro]['pro'])) {
                      $lStatusClosedMax[$lPro]['pro'] = $lPro_status; //liefert direkt Zahl > 0
                    }
                    if ($lStatusClosedMax[$lPro]['pro'] > $lPro_status) {
                      $lStatusClosedMax[$lPro]['pro'] = $lPro_status;
                    }

                    $lAnfang = $lPro_status;
                    $this -> mProStatusAll[$lPro][$lAnfang]['count'] += 1; //
                    if (isset($lPro2Src[$lPro_status]) AND $lPro2Src[$lPro_status][0] > 0) {
                      $lAnfang++;
                    }
                    for ($i = $lAnfang; $i <= $lProCrpDisplay['max']; $i++) {
                      if (isset($lPro2Src[$i]) AND $lPro2Src[$i][0] > 0) {
                        foreach ($lPro2Src[$i] as $k => $src) {
                          if (0 < $k) {
                            $lStatusClosedMax[$lPro][$src] = -2;// wieder zurückgesetzt, weil es aktive Jobs vor der Projektion gibt
                            $lAforeArr[$src] = TRUE;
                            $lStatusClosed[$lPro][$src] = array();
                            $lStatusSrcSetEmpty[$lPro][$src] = TRUE;
                          }
                        }
                        break;
                      }
                    }

                  } elseif ($lPro_StatusInfo['after'] == TRUE) {

                    $lJoblist[$lPro] = esc($lPro);
                    if (!isset($lStatusClosedMax[$lPro]['pro'])) {
                      $lStatusClosedMax[$lPro]['pro'] = $lPro_status;
                    }

                    if ($lStatusClosedMax[$lPro]['pro'] > $lPro_status) {//suche eigentlich den "kleinsten"
                      $lStatusClosedMax[$lPro]['pro'] = $lPro_status;
                    }

                    $lAnfang = $lPro_status;
                    if (isset($lPro2Src[$lPro_status]) AND $lPro2Src[$lPro_status][0] > 0) {
                      $lAnfang--;
                    }
                    for ($i = $lAnfang; $i >= $lProCrpDisplay['min']; $i--) {
                      if (isset($lPro2Src[$i]) AND $lPro2Src[$i][0] > 0) {
                        $this -> mProStatusAll[$lPro][$i]['count'] += 1;
                        foreach ($lPro2Src[$i] as $k => $src) {
                          if (0 < $k AND isset($lSrcStaProMinMax[$src]['max'])) { //hier fuschen wir und nehmen die erste src die passt!
                            $lMax = $lSrcStaProMinMax[$src]['max'];
                            if ($lStatusClosedMax[$lPro]['pro'] > $lMax) {
                              $lStatusClosedMax[$lPro]['pro'] = $lMax;
                            }
                            $lStatusClosed[$lPro]['pro'][$lMax] = $lMax;
                            $this -> mProStatusAll[$lPro][$lMax]['after'] = TRUE;
                            //$this -> mProStatusAll[$lPro][$lPro_status]['after'] = FALSE;
                            break 2;
                          }
                        }
                      }
                    }

                  }//end_elseif ($lPro_StatusInfo['after'] == TRUE)
                }//end_foreach ($lStaInfo as $lPro_status => $lPro_StatusInfo)
                unset($lStatusClosed[$lPro]['pro'][0]);
              }
            }
            $lProIdListAsStr = implode(',', $lJoblist);
          }//end_if (!empty($lProStatus))

          $this -> mJobSrcOrderArr = $lJobSrcOrderArr; //aus der cfg  oder aus CRP $lJobSrcOrderArr

          $lProIdListAsStr = '';
          $lJoblist = array();
          foreach ($this -> mSubLeerAmount as $lPro => $lLeerAmount) {
            if (0 < $lLeerAmount) {
              $this -> mStatusClosed[$lPro] = array();
              $this -> mStatusClosed[$lPro]['pro'] = array();
            } else {

              // es gibt keine leeren ProjektItems
              if (!empty($this -> mJobSrcOrderArr)) {  //aus der cfg  oder aus CRP $lJobSrcOrderArr
                $lJobSrcOrderArr = $this -> mJobSrcOrderArr;
                $lSrc_1 = array_shift($lJobSrcOrderArr);
                while (!empty($lJobSrcOrderArr)) {
                  $lSrc_2 = array_shift($lJobSrcOrderArr);
                  if (isset($lStatusClosed[$lPro][$lSrc_2]) AND !empty($lStatusClosed[$lPro][$lSrc_2])) {
                    if (($lStatusClosedMax[$lPro][$lSrc_1] < $lSrcStaProMinMax[$lSrc_1]['max']
                       AND $lSrcStaProMinMax[$lSrc_1]['min'] <= $lStatusClosedMax[$lPro][$lSrc_1])
                       ) {//gibt es aktive Jobs im vorherigen jobtyp?
                      $lStatusClosed[$lPro][$lSrc_2] = array();
                      $lStatusSrcSetEmpty[$lPro][$lSrc_2] = TRUE;
                      $lStatusClosedMax[$lPro][$lSrc_2] = 0;
                    } else {
                      $lJoblist[$lPro] = esc($lPro);
                      $lSql = 'SELECT COUNT(*) FROM al_job_sub_'.MID.' WHERE pro_id='.esc($lPro);
                      $lSql.= " AND jobid_".$lSrc_1."!='' AND jobid_".$lSrc_2."=''";
                      $lSubSrc_2LeerAmount = CCor_Qry::getInt($lSql);
                      if (0 < $lSubSrc_2LeerAmount) {
                        $lStatusClosed[$lPro][$lSrc_2] = array();
                        $lStatusSrcSetEmpty[$lPro][$lSrc_2] = TRUE;
                        $lStatusClosedMax[$lPro][$lSrc_2] = 0;
                      }
                    }
                  }
                  $lSrc_1 = $lSrc_2;
                }//end_while
              }//end_if (!empty($this -> mJobSrcOrderArr))

              foreach ($lStatusClosed[$lPro] as $lSrc => $lStatus) {
                foreach ($lStatus as $lPro_status => $lBool) {
                  if ('pro' != $lSrc) {

                    $lStatusClosed[$lPro]['pro'][$lPro_status] = $lPro_status;

                  } elseif (isset($lPro2Src[$lPro_status][1])) {
                    $src = $lPro2Src[$lPro_status][1];
                    if (isset($lStatusSrcSetEmpty[$lPro][$src])) {
                      unset($lStatusClosed[$lPro]['pro'][$lPro_status]);//entferne die Einträge, deren Src wieder geleert wurde
                    }
                  }
                }
              } // end_foreach ($lStatusClosed[$lPro] as $lSrc => $lStatus)
              if (!empty($this -> mJobSrcOrderArr)) {
                $localJobSrcOrder = $this -> mJobSrcOrderArr;
                foreach ($this -> mJobSrcOrderArr as $lOrder => $lSrc) {
                  if (isset($lStatusClosedMax[$lPro][$lSrc])) {
                    if (-2 == $lStatusClosedMax[$lPro][$lSrc]) {//wegen afore zurueckgesetzt
                      if (0 == $lOrder) {
                        $this -> mStatusClosedMax[$lPro] = 0;
                        foreach ($localJobSrcOrder as $src => $order) {
                          $lStatusClosedMax[$lPro][$src] = 0;
                        }
                        $lStatusClosedMax[$lPro]['pro'] = 0;
                        $lStatusClosed[$lPro]['pro'] = array();
                        break; //will das "kleinste",
                      } else { // 0 < $lOrder  // ist das zum K...en! :(
                        for ($i=0; $i < $lOrder; $i++) {
                          unset($localJobSrcOrder[$i]);
                        }
                        foreach ($localJobSrcOrder as $order => $src) {
                          $lStatusClosedMax[$lPro][$src] = 0;
                        }
                      }
                    } elseif (0 < $lStatusClosedMax[$lPro][$lSrc]) {
                      $this -> mStatusClosedMax[$lPro] = $lStatusClosedMax[$lPro][$lSrc];
                      if ($lStatusClosedMax[$lPro][$lSrc] < $lSrcStaProMinMax[$lSrc]['max']) {
                        break; //will das "kleinste"
                      }
                    }
                  }
                }
              }
              $lProStatusMax = $this -> mStatusClosedMax[$lPro];
              $lProSrcMax = (isset($lPro2Src[$lProStatusMax][1]) ? $lPro2Src[$lProStatusMax][1] : FALSE);
              if (isset($lStatusClosedMax[$lPro]['pro']) AND -1 < $lStatusClosedMax[$lPro]['pro']
                  AND $lProSrcMax AND $lProStatusMax == $lSrcStaProMinMax[$lProSrcMax]['max'] AND $lProStatusMax < $lStatusClosedMax[$lPro]['pro']) {
                $this -> mStatusClosedMax[$lPro] = $lStatusClosedMax[$lPro]['pro'];  //suche eigentlich den "kleinsten" innerhalb einer src
              }
              $this -> mStatusClosed[$lPro] = $lStatusClosed[$lPro];
            }
          }
        }//end_if (!empty($lSrcStaPro))
      }//end_if (!$this -> mViewJoblist) {
    }
  }

  /**
   * Singleton getInstance method
   *
   * @param array $aProIdlist Arrray of PojectIds
   * @return CJob_Pro_Crp
   */
  public static function getInstance($aProIdlist = array()) {
    if (NULL === self::$mInstance) {
      self::$mInstance = new self($aProIdlist);
    }
    return self::$mInstance;
  }

  public function getStatusClosed($aProId = '') {
    if (!empty($aProId) && isset($this -> mStatusClosed[$aProId])) {
      return $this -> mStatusClosed[$aProId];
    } else {
      return $this -> mStatusClosed;
    }
  }

  public function getStatusClosedMax($aProId = '') {
    if (!empty($aProId) && isset($this -> mStatusClosedMax[$aProId])) {
      return ((!empty($this -> mStatusClosedMax[$aProId]) AND -1 < $this -> mStatusClosedMax[$aProId]) ? $this -> mStatusClosedMax[$aProId] : 0);
    } else {
      return $this -> mStatusClosedMax;
    }
  }

  public function getProStatus($aProId = '') {
    if (!empty($aProId) && isset($this -> mProStatus[$aProId])) {
      return $this -> mProStatus[$aProId];
    } else {
      return $this -> mProStatus;
    }
  }

  public function getProStatusAll($aProId = '') {
    if (!empty($aProId) && isset($this -> mProStatusAll[$aProId])) {
      return $this -> mProStatusAll[$aProId];
    } else {
      return $this -> mProStatusAll;
    }
  }

  public function getProjectsAmount($aProId = '') {
    $aProId = (int)$aProId;
    if (!empty($aProId) && isset($this -> mProjectsAmount[$aProId])) {
      return $this -> mProjectsAmount[$aProId];
    } else {
      return $this -> mProjectsAmount;
    }
  }

  public function getSubAmount($aProId = '') {
    if (!empty($aProId) && isset($this -> mSubAmount[$aProId])) {
      return $this -> mSubAmount[$aProId];
    } else {
      return $this -> mSubAmount;
    }
  }

  public function getSubLeerAmount($aProId = '') {
    if (!empty($aProId) && isset($this -> mSubLeerAmount[$aProId])) {
      return $this -> mSubLeerAmount[$aProId];
    } else {
      return $this -> mSubLeerAmount;
    }
  }

  public function getAutoProStatus($aProId = '') {
    if (!empty($aProId) && isset($this -> mAutoProStatus[$aProId])) {
      return $this -> mAutoProStatus[$aProId];
    } else {
      return $this -> mAutoProStatus;
    }
  }

  public function getAmountJobsInProStatus($aProId = '') {
    if (!empty($aProId) && isset($this -> mAmountJobsInProStatus[$aProId])) {
      return $this -> mAmountJobsInProStatus[$aProId];
    } else {
      return $this -> mAmountJobsInProStatus;
    }
  }

  public function getViewJoblist() {
    return $this -> mViewJoblist;
  }

  public function getNoStatusToStep() {
    return $this -> mNoStatusToStep;
  }

  public function get1StatusNoStep() {
    return $this -> m1StatusNoStep;
  }

  public function getNoStatusFromStep() {
    return $this -> mNoStatusFromStep;
  }

  public function get1StatusNoFromStep() {
    return $this -> m1StatusNoFromStep;
  }
}